#Q1 1. Create a 3 X 5 integer array (any values) and print its attributes (length, size, dimensions).

import numpy as np

x = np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]])
print(len(x))
print(x.shape)
print(x.ndim)

#Q2 2. Using NumPy Create a 4 X 5 integer array from a range between 100 to 200 such that the
difference between each element is 5.

y = np.arange(100,200,5)
y.ravel()
ynew = y.reshape(4,5)
print(ynew)

#Q3 3. Given the following Numpy array:
my_array = np.array([[11 ,22, 33], [44, 55, 66], [77, 88, 99]]) ,
Write a Python syntax to return array of items in the second column from all rows. Your code
should return the following output: [22 55 88]

my_array = np.array([[11 ,22, 33], [44, 55, 66], [77, 88, 99]])

z = my_array[:,1]
print(z)

#Q4 4. Delete the third column from the given array my_array and insert the following new_column
in its place.

my_array = np.array([[54,23,89],[80,12,24],[37,49,71]])
new_column = np.array([[11],[11],[11]])

delarray = np.delete(my_array, 2, axis=1)
np.append(delarray, new_column, axis=1)

#Q5 5. Write a function random_array(size, minVal=0, maxVal=1) which returns a NumPy
array of the given size containing random numbers in the interval given by the default
arguments minVal and maxVal .

def random_array(size, minVal=0, maxVal=1):
    newarr = np.zeros(shape=size, dtype=int)
    for i in range(size):
        randnum = np.random.randint(minVal, maxVal, 1, dtype=int)
        newarr[i] = randnum
    print(newarr)
        

siz = int(input("Enter size of array: "))
mnmum = int(input("Enter min random value: "))
mxmum = int(input("Enter max random value: "))

random_array(siz, mnmum, mxmum)

#Q6 6. Write a function analyze(array) which prints out the minimum , maximum , mean , and
median values of the provided array and returns a dictionary containing these values under
appropriate keys.
Function call:

analyze(np.array([1,5,2,4,3]))
Expected Output:

{"minimum":1,"maximum":5,"mean":3,"median":3}

d = {"minimum" : 0, "maximum" : 0, "mean" : 0, "median" : 0}

def analyze(ary):
    mn = np.mean(ary)
    med = np.median(ary)
    small = np.amin(ary)
    big = np.amax(ary)
    d["maximum"] = big
    d["minimum"] = small
    d["mean"] = mn
    d["median"] = med
    print(d)

analyze(np.array([1,5,2,4,3]))

#Q7 7. Write a function trigonometric_plot(x, plot_type) , which takes in a NumPy array x
and gives the plot of either sin(x) , cos(x) or tan(x) depending on the value assigned to
the plot_type argument. Your function should use the Matplotlib library.
Input 1:
my_array = np.linspace(-5,5,75)
trigonometric_plot(my_array, sin)
Expected output: Should plot a sin curve
Input 2:
my_array = np.linspace(-5,5,75)
trigonometric_plot(my_array, cos)
Expected output: Should plot a cosine curve



import matplotlib.pyplot as plt

def trigonometric_plot(x, plot_type):
    if plot_type == "sin":
        plo = np.sin(x)
        plt.plot(plo)
        plt.show
    elif plot_type == "cos":
        plo = np.cos(x)
        plt.plot(plo)
        plt.show
    elif plot_type == "tan":
        plo = np.tan(x)
        plt.plot(plo)
        plt.show
    else:
        print("Wrong input")

my_array = np.linspace(-5,5,75)

plttype = input("Enter Sin, Cos or Tan: ")
plttype.lower()

trigonometric_plot(my_array, plttype)

#Q8 8. Read the given file weight_height_data.csv using Pandas. Plot the given data (height vs
weight) as a scatterplot using the Matplotlib library.

import pandas as pd

df = pd.read_csv("weight_height_data (1).csv")
df.head()

yaxis = df['Height']
xaxis = df['Weight']
plt.scatter(xaxis, yaxis)
plt.ylabel = "Height"
plt.xlabel = "Weight"
plt.show()

#Q9 9. Compute the BMI for each pair of data-points from Q.8 above. Add the BMI values as a new
column in the existing Pandas DataFrame. BMI = (weight in kgs)/(height in
meters)^2 (Hint: Be careful with the units!)


import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv("weight_height_data (1).csv")

print(df)

hei = []
for i in df['Height']:
    j = i
    ht = float(j) * 0.0254
    hei.append(ht)
    
wei = []
for i in df['Weight']:
    j = i
    wt = float(j) * 0.4535
    wei.append(wt)
    
bmi = []

for i in range(len(df)):
    bmi.append(wei[i] / hei[i] ** 2)
    
df["BMI"] = bmi

print(df)

#Q10 . Finally, compute the average BMI using the data from Q.9 above.

meanpanda = df['BMI'].mean()
print("Average BMI = ", meanpanda)


